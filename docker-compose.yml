version: '3'

#declare the services that will run
services: 
  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181" #map container port for zookeeper service

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092" #expose Kafka broker port to host
    expose:
      - "9093" #expose additional listener port
    environment:
      # Kafka advertised listeners configuration
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      # Security protocol map for listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      # Kafka listeners configuration
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      #Inter-broker listener name
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      # Zookeeper connection string
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper #ensure zookeeper service is started befor kafka

    volumes:
    #Docker socket for container communication
      - /var/run/docker.sock:/var/run/docker.sock

  scraper:
    build: . #build context for service
    command: ["python", "scraper.py"]  #command to execute within the container

    depends_on:
      - kafka #ensure kafka service is started befor scraper
    restart: on-failure #restart policy on failure
    volumes:
      - data_volume:/app/data #data volume for scraper


  fastapi:
    build: .
    command: ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"]

    ports:
      - "8000:8000" 
    depends_on:
       - scraper  #ensure scraper service is started befor scraper

    volumes:
      - data_volume:/app/data

volumes:
  data_volume: #define a volume to persist data generated and shared between containers(scraper and fastapi)
